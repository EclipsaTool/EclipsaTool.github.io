{"categories":[{"title":"笔记","uri":"https://eclipsatool.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"posts":[{"content":"vim入门教程 作者：eclipsa\n摘要：建立对vim的基本理解。提供一小部分常用指令。\n[toc]\n什么是vim 简单来说是一个开源的cli文本编辑器。作为vi的兼容升级扩展版本。\nvim基本模式 vim有四个基本模式。\n命令模式\n这是进入vim后的默认模式，供浏览，复制黏贴等操作。\n输入模式\ni进入输入模式，主要是进行单字母编辑。\n:dig显示复合字母于符号对应表，digraphs。\nCTRL+K进入复合字母输入模式。\n底线命令模式\n:进入底线命令模式，支持一些特殊的命令。\n可视化编辑模式\nCTRL+V进入块编辑模式，操作有高亮，可以查看操作范围，支持多行编辑。\nvim基本控制 方向\n快捷键h、j、k、l分别可用于移动光标向左、下、上、右。又或者使用四个方向键。\n关闭/退出\n:q关闭\n:qa退出\n帮助信息\n正常模式命令：:help x\n可视模式命令：:help v_u\n插入模式命令：:help i_\u0026lt;Esc\u0026gt;\n命令行模式命令：:help :quit\n命令行模式编辑：:help c_\u0026lt;Del\u0026gt;\nvim命令参数：:help -r\nvim参数：:help 'textwidth'\n正则表达式：:help /[\nVim快速教程 基本说明 N代表任意数值，是常用的可选指示参数，常用形式为N\u0026lt;cmd\u0026gt;。\n\u0026lt;CR\u0026gt;代表carriage return，也就是常说的回车键，归位键，/r。\n\u0026lt;LF\u0026gt;代表line feed，也就是常说的换行键，增行键，/n。\n左右移动 Nh/l向左/右移动N个字符。\n0/$移动到行头/尾。\ngM移动到行中。\nN|移动到此行第N个列。\nNF/f\u0026lt;char\u0026gt;移动到本行第N个char的左/右。\n上下移动 Nk/j向上/下移动N行。\nN向下移动N行。\nNG去本文第N行。\ngg/G去本文首/尾行。\nN%去到本文N%的位置。\nCTRL+U半屏幕向上滚动，upwards。\nCTRL+D半屏幕向上滚动，downwards。\n编辑 Nyy向复制删除N行内容。\nNdd向下删除N行内容。\np黏贴复制的内容。\nu撤销上一个操作，undo。\nCTRL+R重执行上一个操作，redo。\n正则搜索 N/{pattern}\u0026lt;CR\u0026gt;向下搜索第N个参数\nN?{pattern}\u0026lt;CR\u0026gt;向上搜索第N个参数\npattern\n   pattern 意义     . 任意一个字符   \\\u0026lt; 单词头   \\\u0026gt; 单词尾   [a-z] 匹配范围内的一个字符   [^a-z] 匹配不在范围内的一个字符   \\s 匹配一个空白字符   \\S 匹配一个非空白字符   \\t 匹配\u0026lt;Tab\u0026gt;   \\r 匹配\u0026lt;CR\u0026gt;    pattern后缀\n   修饰词 意义     * 前者匹配0个或以上元素   \\+ 前者匹配1个或以上元素   \\= 前者匹配0个或1个元素   \\{2,5} 前者匹配2个到5个元素   \\| 分割多种pattern，相当于或。eg:/word1\\|word2    重复搜索\n\\\u0026lt;CR\u0026gt;向下重复上一次搜索。\n?\u0026lt;CR\u0026gt;向上重复上一次搜索。\n输入模式快捷键 \u0026lt;Home\u0026gt;/\u0026lt;End\u0026gt;去行首/尾\n\u0026lt;Esc\u0026gt;退出输入模式。\nCTRL+V以ASCII码输入字符。\n设置 :se[t] {option} 启动某个option。\n:se[t] no{option} 关闭某个option。\n:se[t] {option}? 查看某个option的值。\n:se[t] {option}\u0026amp; 重置某个option到默认值。\n:se[t] {option}={value}将某个option设置为某个value。\n:se[t] {option}|+={value}向某个option添加一个value。\n:se[t] {option}-={value}向某个option减去一个value。\noption\n   option option短码 意义     number nu 显示行号    引用程序 :shell启动一个shell。\n:!\u0026lt;cmd\u0026gt;带参数执行一个shell。\n二进制文件编辑 用vim -b \u0026lt;file_name\u0026gt;打开文件，用:%!xxd格式化输出为十六进制对照格式并编辑，用:%!xxd -r还原回二级制文件。\n(实际上vim是调用xxd程序完成的这件事。命令为xxd \u0026lt;file_name\u0026gt;)\nxxd默认视图效果如下。其中显示的每两个字符为一个byte数值的hex格式，即hex格式ASCII码值。\n00000000: 310a 3232 0a33 3333 0a34 3434 340a 3535 1.22.333.4444.55 00000010: 3535 350a 3636 3636 0a37 3737 0a38 380a 555.6666.777.88.  xxd -g 1修改为一个byte一个分组的时候显示效果如下。\n00000000: 31 0a 32 32 0a 33 33 33 0a 34 34 34 34 0a 35 35 1.22.333.4444.55 00000010: 35 35 35 0a 36 36 36 36 0a 37 37 37 0a 38 38 0a 555.6666.777.88.  标记 m{a-Z}标记一个位置。\n`\u0026rdquo; 跳转到最后一次标记这个文件的地方。\n:marks列出所有活动标记。\n`X 跳转到X标记的位置。\n``跳转到上一次执行跳转的位置。\n标签 :ta[g][!] {tag}跳转到指定标签。\n:tags显示标签列表。\n文本对象移动 Nw向前N个单词。\nNb退回N个单词。\nN)/(往前/退回N句子。\nN}/{往前/退回N段落。\n在线信息 帮助文件：https://vimhelp.org/\n快速学习文件：https://vimhelp.org/quickref.txt.html#quickref\nvim学习游戏：http://vim-adventures.com/\nvim常见问题：https://vimhelp.org/vim_faq.txt.html\n","id":0,"section":"posts","summary":"vim入门教程 作者：eclipsa 摘要：建立对vim的基本理解。提供一小部分常用指令。 [toc] 什么是vim 简单来说是一个开源的cli文本编辑器。作","tags":["vim","计算机"],"title":"vim入门教程","uri":"https://eclipsatool.github.io/2020/08/28/vim%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/","year":"2020"},{"content":"source insight入门教程 作者：eclipsa\n摘要：描述source insight的一些基本概念和用法。\n[toc]\n什么是source insight 简单来说，是一个面向软件开发项目的代码阅读/编辑器。高性能(大型项目的适用性)，上下文分析/提示，函数跳转，是它最重要的特点。\n关键概念 project project，指项目。而软件的项目指的是完成一个指定目标的全部代码。source insight是面向项目开发，针对项目进行管理。\nsource insight的每个项目有两个项目文件夹地址。一个是源码文件夹，也就是项目源代码。另外一个是source insight关于该项目管理的文件夹，存储诸如分析过的符号信息、源码文件树、编辑临时文件之类的内容。\n工作流程 新建project\n用Project \u0026gt; New Project命令创建project。\n(project配置中两个快速搜索功能默认启用，会提高硬盘空间和内存的占用程度。特大项目看情况避免卡顿。)\n为project添加文件\n在工具栏中Project \u0026gt; Add and Remove Project Files选项下，可以执行，添加/移除文件。\n打开project\n在工具栏中Project选项下，可以执行，打开一个project。\n编辑内容\n开发代码。\n操作详解 项目文件 Project \u0026gt; Project Settings中支持Master File List，创建项目文件树配置文件。可以放在项目中，其他开发人员就可以轻松同步项目文件树状态。\n配置文件格式如下\n;注释 FM15Output\\*.bat  操作project 添加/删除project\n在工具栏中Project选项下，可以执行打开、关闭、删除、复制、设置一个project。\n(对应英文new、close、remove、copy、project setttings。)\n同步符号表\n在工具栏中Project \u0026gt; Synchronize Files选项下，可以执行同步符号表。适用于不在source insight中修改过代码时。\n重建项目\n在工具栏中Project \u0026gt; Rebuild Project选项下，可以重建项目，适用于source insight项目异常时修复之用。重建source insight的项目管理相关文件，非源码文件。\n操作project文件 添加/移除\n在工具栏中Project \u0026gt; Add and Remove Project Files选项下，可以执行，添加/移除文件。\n(移除只是从项目中移除，不是删除。)\n新建文件\nctrl n用于新建文件。\n格式化换行符\nEdit \u0026gt; Special Edit \u0026gt; Normalize End Of Line Characters中可以修改当前文件的换行符。\nOptions \u0026gt; Peference \u0026gt; Files \u0026gt; Default line ending中可以修改默认文件的换行符，用于新建文件。\n扩展操作模块 关系窗口\nView \u0026gt; panel \u0026gt; Relation Window用于显示关系窗口，relation window。可以显示某个语法元素与其相关的所有其他语法元素关系，如函数调用关系，类关系。关系窗口支持多种多种视图模式，可以在上面用右键调整。\n上下文窗口\nView \u0026gt; Panel \u0026gt; Context window用于显示上下文窗口，context window简单的说就是一个自动预览相关信息的窗口，诸如函数定义，变量定义。\n代码段窗口\nView \u0026gt; Panel \u0026gt; Snippet Window，用于管理自定义的常用代码片段，供快速输入用。如通用的while循环结构，某种语言专用的for循环结构。\n搜索栏\nview \u0026gt; File Search Bar用于启用搜索栏，适用于搜索当前打开的文件。\n视图操作 上移\nalt ↑用于向上移动代码视图窗口。\n下移\nalt ↓用于向下移动代码视图窗口。\n左移\nalt ←用于向左移动代码视图窗口。\n右移\nalt →用于向右移动代码视图窗口。\n编辑操作 跳转到定义\n  在语法元素上ctrl click\n  选中语法元素后ctrl =\n  选中语法元素后Search \u0026gt; Jump to Definition\n  可以实现跳转到定义，Jump to Definition。\n跳转到调用\nctrl alt c可以实现跳转到调用，Jump to Caller。也可以在定义上右键Jump to Caller。\n文本搜索\nctrl f在当前文件中进行搜索，支持正则匹配。也可以用Search \u0026gt; Search。\n文本向下/向上搜索\nF4或者F3，向下/向上执行文本搜索或引用搜索。也可以用Search \u0026gt; Search Forward或者Search \u0026gt; Search Backward。\n项目文件搜索\nSearch \u0026gt; Search Project在项目中进行搜索，支持正则匹配。\n引用搜索\nctrl /此命令针对语法元素，可以搜索全项目对该语法元素的引用，使用项目分析的缓存文件，速度较快。也可以用Search \u0026gt; Lookup References。\n搜索并替换\nctrl h或Search \u0026gt; Replace可以搜索并替换本文件的部分文本内容，支持正则。也可以用Search \u0026gt; Replace。\n多文件搜索并替换\nctrl shift h或Search \u0026gt; Replace Files可以搜索并替换本文件的部分文本内容，支持正则。也可以用Search \u0026gt; Replace Files。\n智能重命名\nctrl '针对语法元素进行本地级别/项目级别的重命名替换。\n自动缩进\nsource insight选中一些语法元素，按tab就可以自动缩进代码。\n自动反向缩进\nsource insight选中一些语法元素，按shift tab自动反向缩进代码。\n自动注释\nEdit \u0026gt; Special Edit \u0026gt; Comment Lines自动单行注释。\n自动取消注释\nEdit \u0026gt; Special Edit \u0026gt; Un-Comment Lines自动取消单行注释。\n撤销\nctrl z用于回滚上次编辑的操作。也可以用Edit \u0026gt; Undo。\n重做\nctrl y用于重执行回滚的编辑的操作。也可以用Edit \u0026gt; Eedo。\n选中行\n鼠标于同行尾部外，左键双击可以选中一行。\n选中且复制当前行\nctrl k用于选中及复制当前光标所在行。\n移动与选择 预览窗口\n推荐的文本移动方式，直接点击预览窗口配合鼠标滚轮。\n按行跳转\nctrl g可以实现跳转到指定行。\n闭合符号选择\n双击闭合符号即可选中整个闭合块。闭合符号包括，括号、方括号、花括号、双引号。\n闭合块选择\nctrl -在光标选中范围外选择闭合块(闭合方括号、花括号)进行内容选择。多次使用则，可以逐步选中不同量级的封闭块。\n多行选择\nalt 鼠标左键用于框选代码。适用于删除。\n正则表达式 source insight支持两种正则表达式模式，分别是\u0026quot;Source Insight\u0026quot;和\u0026quot;Perl Compatible\u0026rdquo;。\nSource Insight正则\n基本词\n   语法 意义 匹配示例     . 匹配一个任意字符 b.g匹配bag和b1g   ^ 匹配行首    $ 匹配行尾    [abc] 匹配一个范围内的字符 [abc]匹配a或c   ^[abc] 匹配一个不在范围内的字符 ^[abc]匹配d   \\t 匹配一个tab    \\s 匹配一个空格字符    \\w 匹配一个空白字符    \\n 匹配换行符     基本词(基本组)\n   语法 意义 匹配示例     [abc] 匹配一个范围内的字符 [abc]匹配a或c   ^[abc] 匹配一个不在范围内的字符 ^[abc]匹配d   [a-z]或[a-zA-Z]或[a-zA-Z0-9] 匹配一个范围内的字符     量词\n量词是对前一个正则基本词的修饰，补充它的数量关系。\n   语法 意义 匹配示例     * 匹配0个及以上的内容    + 匹配1个及以上的内容     正则分组\n用\\(和\\)包裹一个正则基本词结构，代表一个匹配的一个分组。去掉\\(和\\)代表无分组。分组为二次提取内容，相当于完成匹配后进行多一个分组匹配并分离出分组的部分，适用于替换内容。\n字符转义\n\\符号用于转义正则中用道的语义字符。\n操作工具 文件对比\nTools \u0026gt; Compare File启用文件对比功能。\n文件夹对比\nTools \u0026gt; Compare with Backup File启动当前文件与source insight的文件自动备份进行对比。\n备份文件对比\nTools \u0026gt; Directory Compare启动文件夹(多文件)对比功能。面板仅列出文件状态。双击进入文件对比。\n代码格式化\nTools \u0026gt; Reformat Source Code with xxx Preset可以格式化代码到某一种风格。风格在Tools \u0026gt; Reformat Source Code Options中调整。\n重置设置 Options \u0026gt; Preferences \u0026gt; General中的Use Defaults可以重置source insight的配置回到默认状态。\n个性化配置 Options \u0026gt; File Type Options中支持针对某种语言进行的个性化管理配置。\n显示行号\nOptions \u0026gt; File Type Options中Show line numbers能够配置当前编程语言默认显示行号。\nView \u0026gt; Line Numbers可以在当前文件显示行号。\n显示右边界\nOptions \u0026gt; File Type Options中Show right margin能够配置当前编程语言默认右边界，用于辅助控制单行字符的长度。\nOptions \u0026gt; File Type Options中Margin width用于控制右边界显示的位置。\ntab自动转spaces\nOptions \u0026gt; File Type Options中Expand tabs to spaces能够配置当前编程语言默认自动将tab转化为空格。\nOptions \u0026gt; File Type Options中Tab width用于控制tab转化空格的数量。\ntab和spaces可视化\nOptions \u0026gt; File Type Options中Visible tabs和Visible spaces能够配置当前编程语言默认自动以•代替显示tab和space。\nView \u0026gt; Visible Tabs and Spaces可以在当前文件自动以•代替显示tab和space。\n换行符可视化\nView \u0026gt; Visible End Of Line可以在当前文件以ASCII符号简称显示行号符。\n在线信息 官方教程：https://www.sourceinsight.com/doc/v4/userguide/index.html#t=Manual%2FFrontMatter%2FFrontMatter.htm\n","id":1,"section":"posts","summary":"source insight入门教程 作者：eclipsa 摘要：描述source insight的一些基本概念和用法。 [toc] 什么是source insight 简单来说，是一个","tags":["source insight","应用软件","计算机"],"title":"source insight入门教程","uri":"https://eclipsatool.github.io/2020/08/23/source-insight%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/","year":"2020"},{"content":"Git基础手册 作者：eclipsa\n摘要：较为完整的介绍git的结构和理念。提供基本的指令使用教程。文中使用的系统为ubuntu。\n[toc]\nGit是什么 Git是一个开源的分布式版本控制1系统，适用于多人合作的大型项目管理。linux内核开发也使用Git作为版本管理软件，说明了它对大型项目的适用性。\nGit的核心概念 分布式 每个分布式版本控制系统终端都拥有完整项目历史日志和历史文件。即便中心仓库损毁，仍有很大几率可以完全还原项目。即便无法完整还原，大部分历史日志和历史文件仍可还原。而集中式版本控制系统仓库仅存在于中心服务器，相对缺乏安全性。\n文件的位置和状态 文件的位置 一个git项目中，文件存在于，Work Directory2，Staging Area3，Local Repository4，Remote Repositorye5。\n工作区文件的状态   未跟踪\n ??：git发现此文件，但此文件未跟踪。不在缓存区，不在本地仓库。    已跟踪\n 未修改，已经提交。 A：add，已经准确加入缓存，没有改变。 M：modified，相对于本地仓库已经修改，已经缓存。 MM：modified modified，相对于本地仓库已经修改，已经缓存，相对于缓存又修改了一次，尚未缓存。 D：deleted，文件相对于本地仓库已经从工作目录删除。（如果是绿色字体代表已经不追踪。红色代表工作目录追踪的文件的被删除了。）    Git是针对文件做快照，操作指令时是针对快照而言的。所以，会出现缓存已经有了这个文件，但是这个文件相对于缓存仍然改变了。\n常用命令与文件位置 Git构成 Git的分部程序包括文本编辑器，差异分析工具等等多种工具的输出信息构成。具体为 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。\n默认差异分析工具为vimdiff。\n工具均可替换。\nGit的工作流程  添加文件到Git的监控中 本地处理  在工作文件夹修改文件 将需要作为一次镜像的修改过的文件添加到缓存区 提交文件到本地仓库   将本地仓库推到远程端仓库  Staging Area的意义 Staging Area缓存区用于缓存准备提交版本库的内容，其中包括所有的文件快照，以及一个提交对象6。这样子可以让一次提交中所有修改的文件都是同一个功能范围。有助于开发维护，当某个功能更新出现问题的时候很容易知道关联的文件关系。\n版本标签的意义 相当于额外标记版本库的多个快照版本中，比较特殊的、重要的版本。比如以分布版本号为标签标记分布版本，然后方便快速查找这个分布版本的信息。\n分支的意义、位置 分支的意义 分支是系统某个阶段的快照的副本，有着与其他分支不同的发展情况。这样子实现了版本库中不同版本的不同稳定层级的分离。\n分支可有长期、短期之分。长期分支如，主分支(发布分支)，开发分支(预发布或者刚合并处于稳定性测试中)。短分如主题分支(根据开发需求/特定功能命名的，用于开发的分支。)\n推荐分支标准\n   分支名 意义     maste 发布分支/主分支   develop 合并测试分支   topic/** 主题分支，根据功能命名。用于具体开发。    分支的位置 Git的分支有本地、远程之分。\n安装Git ubuntu：sudo apt-get install git\n获取帮助 git help git help \u0026lt;指令\u0026gt;  配置Git 配置邮箱信息 配置全局邮箱信息，针对每个仓库。\ngit config --global user.name \u0026quot;John Doe\u0026quot; git config --global user.email johndoe@example.com  配置本地邮箱信息，针对个别仓库。\ngit config --local user.name \u0026quot;John Doe\u0026quot; git config --local user.email johndoe@example.com  检查配置\ngit config --list  配置忽略文件规则 创建忽略文件规则 在工作文件夹(与.git同级)创建.gitignore文件。\n这样子这个文件仅作用用于此项目。\n子目录也可以创建.gitignore文件。\n语法简介 以#开头的git会认为是注释。\n默认匹配模式会自动递归整个工作目录。使用标准glob模式7。\n匹配模式以/开头可以忽略指定目录。\n匹配模式以/结尾可以忽略指定的文件夹名。(会递归，所有同名文件夹都忽略)\n以!开头可以指定跟踪某些匹配模式匹配的内容。(相当于补丁)\n使用官方帮助 man gitignore  示例 # 忽略所有的 .a 文件 *.a # 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件 !lib.a # 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO /TODO # 忽略任何目录下名为 build 的文件夹 build/ # 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt doc/*.txt # 忽略 doc/ 目录及其所有子目录下的 .pdf 文件 doc/**/*.pdf  官方基础范例 # gitignore template for InforCRM (formerly SalesLogix) # website: https://www.infor.com/product-summary/cx/infor-crm/ # # Recommended: VisualStudio.gitignore # Ignore model files that are auto-generated ModelIndex.xml ExportedFiles.xml # Ignore deployment files [Mm]odel/[Dd]eployment # Force include portal SupportFiles !Model/Portal/*/SupportFiles/[Bb]in/ !Model/Portal/PortalTemplates/*/SupportFiles/[Bb]in  Git基础 获取仓库 建立本地仓库 初始化本地仓库 初始化本地仓库，即在该文件夹创建.git文件夹，里面包含git的控制脚本，存储数据，版本日志等等内容。\n刚初始化的仓库为空仓库，不追踪文件。\ncd /home/eclipsa/example_git_workspace git init  克隆远程仓库 git clone支持多种通讯协议。\ngit clone \u0026lt;url\u0026gt; git clone ssh://[user@]host.xz[:port]/path/to/repo.git/ git clone git://host.xz[:port]/path/to/repo.git/ git clone http[s]://host.xz[:port]/path/to/repo.git/ git clone ftp[s]://host.xz[:port]/path/to/repo.git/  查看文件信息 查看文件状态 以下命令可以列出文件状态。加-s功能是简化输出。\ngit status git stauts -s  添加文件 以下命令用于准确的添加文件到缓存区。（添加新文件，或者刷新缓存区文件快照，或者刷新文件到缓存区并解除冲突状态，也就是说已经确认文件无误可以添加到缓存区等待提交。原理是添加文件快照到缓存区，修改提交对象中的对应有修改的文件的文件指针。）\ngit add \u0026lt;文件名\u0026gt;  查看文件异同 以下命令可以以文件补丁形式列出工作区文件相对于缓存区文件的区别。\ngit diff  以下命令可以以文件补丁形式列出缓存区文件相对于本地仓库文件的区别。\ngit diff --cached git diff --staged  提交文件 以下命令用于提交缓存区文件到本地仓库。\ngit commit git commit -m \u0026quot;修改注释” git commit \u0026lt;文件名\u0026gt;  以下命令用于提交工作目录文件到本地仓库。\ngit commit -a \u0026lt;文件名\u0026gt;  git config --global core.editor可以指定git默认用的文本编辑器。\n查看仓库缓存区全部文件 git ls-files  移除和移动文件 移除文件 以下命令将让文件从缓存区移除，并从工作目录删除。(同时也是从git的跟踪文件清单移除。但是文件快照不会删除。文件在缓存区状态改变为删除，等待提交。)\ngit rm \u0026lt;文件名\u0026gt;  如果文件删除之前已经修改过，或者已经加到缓存区还没提交。需要添加-f强制删除(force。这里作为保护措施，防止用户不小心把没有提交的文件删除了。)。\ngit rm -f \u0026lt;文件名\u0026gt;  需要将文件从缓存区移除，但不删除工作目录的对应文件。需要添加--cached参数。\ngit rm --cached \u0026lt;文件名\u0026gt;  移动/重命名文件 重命名工作区和缓存区的文件。(缓存区操作为删除原文件，然后添加新文件。git会自行推断这是重命名操作。)\ngit mv \u0026lt;文件名\u0026gt; \u0026lt;新文件名\u0026gt;  查看提交历史 以下命令将会按时间排序显示提交注释，最上面为最新的提交。\ngit log  以下命令将以补丁形式显示内容，限定为2次提交内容。\ngit log -p -2 git log -patch -2  以下命令将显示提交注释和文件变化简要。\ngit log --stat  git log有用的参数\n   参数 作用     \u0026ndash;graph 在日志旁以 ASCII 图形显示分支与合并历史。   -p 按文件补丁形式显示。   \u0026ndash;name-only 仅在提交信息后显示已修改的文件清单。   \u0026ndash;name-status 显示新增、修改、删除的文件清单。   \u0026ndash;oneline --pretty=oneline --abbrev-commit 合用的简写。一行显示。   \u0026ndash;author=\u0026rdquo;\u0026rdquo; 限制作者。   \u0026ndash;since, \u0026ndash;after 指定时间。   \u0026ndash;grep 仅显示提交说明中包含指定字符串的提交。    撤销操作 重新提交 以下命令将清除上一次的提交版本库信息(不包括提交注释)，并以现有缓存区的状态重新提交版本库。\n适用于当刚提交完某个功能发现文件功能有纰漏，修补之后希望重新提交又不需要添加新的版本信息，或者提交的文件数有遗漏时，需要修正本地版本库记录。\ngit commit --amend  撤销添加文件 以下命令用于将修改过的，添加到缓存区的文件从缓存区中移出。\n适用于处理将准备分两次提交的文件误添加了到缓存区等待提交的情况。\ngit reset HEAD \u0026lt;文件名\u0026gt;  还原文件 以下命令用于从仓库中最后一次提交的快照中取出文件覆盖工作目录的文件。\ngit checkout -- \u0026lt;文件名\u0026gt;  远程仓库管理 添加远程仓库 git clone 使用git clone时默认就会添加远程仓库信息。\ngit remote add 以下命令用于手动为本地仓库添加远程仓库\ngit remote add \u0026lt;仓库服务器别名\u0026gt; \u0026lt;url\u0026gt;  查看全部远程仓库 以下命令可以查看git配置过的全部远程仓库的服务器名称。加-v可以显示远程仓库的URL。\ngit remote git remote -v  获取远程仓库内容 以下指令用于获取远程仓库的内容。(此命令只会下载版本库，不会合并)\ngit fetch \u0026lt;远程仓库服务器名\u0026gt;  推送本地仓库到远程 git push \u0026lt;远程仓库服务器名\u0026gt; \u0026lt;推送本地版本库分支名\u0026gt; git push \u0026lt;远程仓库服务器名\u0026gt; \u0026lt;推送本地版本库分支名\u0026gt;:\u0026lt;远程仓库分支名\u0026gt;  同步远程仓库 以下命令能将数据推送到远程服务器。其实它是git fetch和git merge的连用的简化指令。\ngit pull  查看远程仓库信息 git remote show \u0026lt;远程仓库服务器名\u0026gt;  重命名远程仓库 git remote rename \u0026lt;远程仓库服务器名\u0026gt; \u0026lt;远程仓库服务器新名\u0026gt;  删除远程仓库 以下命令将删除远程仓库及其相关配置。本地仓库不受影响。\ngit remote remove \u0026lt;远程仓库服务器名\u0026gt; git remote rm \u0026lt;远程仓库服务器名\u0026gt;  版本标签 列出版本库所有版本标签 git tag  给版本库当前版本打附注标签 git tag -a \u0026lt;标签名\u0026gt;  显示标签信息 git tag show  后期补打标签 以下命令用于后期补打标签。需要校验和，也就是git log中commit字段的值。\ngit tag -a \u0026lt;标签名\u0026gt; \u0026lt;部分校验和/完整校验和\u0026gt;  推送标签 git默认不推送标签的远程版本库。手动推送命令如下。使用--tags可以推送所有未推送标签\ngit pull \u0026lt;分支名\u0026gt; \u0026lt;标签名\u0026gt; git pull \u0026lt;分支名\u0026gt; --tags  删除标签 以下命令可以删除本地版本库的特定标签。\ngit tag -d \u0026lt;标签名\u0026gt;  以下命令可以同步删除服务器标签名\ngit pull \u0026lt;远程仓库服务器名\u0026gt; :refs/tags/\u0026lt;标签名\u0026gt; git pull \u0026lt;远程仓库服务器名\u0026gt; --delete \u0026lt;标签名\u0026gt;  查看标签快照 以下命令仅用于查看。如果需要修改，以标签版本制作新分支然后修改提交。使用后会将在工作目录显示该标签快照。\ngit checkout \u0026lt;标签名\u0026gt;  Git分支 创建分支 以当前仓库缓存区快照创建一个分支快照。\ngit branch \u0026lt;分支名\u0026gt;  创建并切换分支\ngit checkout -b \u0026lt;分支名\u0026gt;  切换分支 以下命令能用于切换分支。切换分支之前必须保证工作目录和缓存区的\u0026quot;干净\u0026rdquo;，即其中不能有修改未缓存的文件，或者缓存未提交的文件。这样子切换分支git才能恢复为离开分支/创建分支的时的文件状态。\n(可以通过临时暂存状态或者提交来处理)\ngit checkout \u0026lt;分支名\u0026gt;  合并分支 以下命令用于合并分支。当临时分支合并完成之后，临时分支已经没有作用，可以删除。\ngit merge \u0026lt;分支名\u0026gt;  如果合并时，有文件发生冲突，git会把能合并的都合并，留下冲突并对冲突内容标记，然后可以用git status查看未合并文件信息，然后手动修改，用git add \u0026lt;文件名\u0026gt;准确添加文件到缓存区以通知git冲突已经确认并解决，然后使用git commit提交修改即可。\n冲突内容标记如下\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD:index.html \u0026lt;div id=\u0026quot;footer\u0026quot;\u0026gt;contact : email.support@github.com\u0026lt;/div\u0026gt; ======= \u0026lt;div id=\u0026quot;footer\u0026quot;\u0026gt; please contact us at support@github.com \u0026lt;/div\u0026gt; \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; iss53:index.html  删除分支 git branch -d \u0026lt;分支名\u0026gt;  查看分支 查看分支时，分支名前面有*号的说明是当前分支。\ngit branch  查看所有分支以及其最后一次提交注释。\ngit branch -v  查看所有未合并的分支\ngit branch --no--merged  查看所有已经合并的分支\ngit branch --merged  确认某个分支是否合并\ngit branch --merged \u0026lt;分支名\u0026gt;  跟踪分支 跟踪分支的意义 跟踪分支即与远程分支8有直接联系的本地分支。在其中可以使用git pull等命令。\n创建远程分支 git checkout -b \u0026lt;本地分支名\u0026gt; \u0026lt;远程服务器名\u0026gt;/\u0026lt;远程分支名\u0026gt; git checkout --track \u0026lt;远程服务器名\u0026gt;/\u0026lt;远程分支名\u0026gt;  设置/修改上游分支 git branch -u \u0026lt;远程服务器名\u0026gt;/\u0026lt;远程分支名\u0026gt;  查看跟踪分支 以下命令将显示本地缓存中的分支信息。\ngit branch -vv  以下命令用于下载版本库，以使查看命令中显示出远程端最新的状态。一般不需要使用。\ngit fetch --all  删除远程分支 git pull \u0026lt;远程服务器名\u0026gt; --delete \u0026lt;分支名\u0026gt;  贮藏与清理 创建贮藏 以下命令将会让工作目录的脏文件和缓存区的脏文件保存到一个额外栈中(不同分支共用，但不同版本库不共用)。以此达到临时清理干净环境的作用，提供切换分支的环境。\n这也说明，默认贮藏是针对跟踪的文件的。\ngit stash git stash push  列出贮藏 git stash list  应用贮藏 以下命令用于应用贮藏。第一条命令默认应用最近一次贮藏(不分分支)。stash@{贮藏号}用于应用特定版本的贮藏。\n默认应用贮藏只是应用贮藏的工作目录状态。\n--index可以让git在应用贮藏时，同时应用到工作目录和缓存区，而非只是工作目录。\ngit stash apply git stash apply stash@{贮藏号} git stash apply --index  移除贮藏 以下命令用于移除贮藏。第一条命令默认移除最近一次贮藏(不分分支)。stash@{贮藏号}用于移除特定版本的贮藏。\ngit stash drop git stash drop stash@{贮藏号}  应用贮藏同时移除贮藏\ngit stash pop  从贮藏创建分支 以下命令用于从贮藏创建分支。第一条命令默认使用最近一次贮藏(不分分支)。stash@{贮藏号}用于指定特定版本的贮藏。\ngit stash branch \u0026lt;分支名\u0026gt; git stash branch \u0026lt;分支名\u0026gt; stash@{贮藏号}  清理文件 以下命令用于清理git中未跟踪的软件(.gitignore也算跟踪)。\n默认不清理.gitignore的匹配的文件，需要清理可以添加-x参数。\ngit clean git clean -x  在线信息 官方资源 英文参考书：https://git-scm.com/book/en/v2\n中文参考书：https://git-scm.com/book/zh/v2\nGit缓存结构说明：https://git-scm.com/about/staging-area\n中文速查手册：https://github.github.com/training-kit/downloads/zh_CN/github-git-cheat-sheet/\n英文速查手册：https://github.github.com/training-kit/downloads/github-git-cheat-sheet/\n英文指令手册：https://git-scm.com/docs\n安装教程：https://git-scm.com/download/linux\ngitignore模板：https://github.com/github/gitignore/tree/master/community\n参考资源 \u0026ldquo;对比Git与SVN，这篇讲的很易懂\u0026rdquo;：https://www.cnblogs.com/qcloud1001/archive/2018/10/31/9884576.html\n  记录一段时间内对一个或者多个文件的更改的管理/记录。方便还原关键时间节点的快照。 \u0026#x21a9;\u0026#xfe0e;\n 工作目录，也就是文件修改的目录。 \u0026#x21a9;\u0026#xfe0e;\n 缓存区，缓存文件快照、提交对象(快照树)的地方，位于.git目录内。其中包含项目所有的文件以及一个提交对象。 \u0026#x21a9;\u0026#xfe0e;\n 本地仓库，又名HEAD，git仓库。位于.git目录内，也就是本地版本库。 \u0026#x21a9;\u0026#xfe0e;\n 远程仓库，也就是部署了git服务且为开放状态的git仓库，也就是远程版本库。 \u0026#x21a9;\u0026#xfe0e;\n 管理文件引用的一个数据对象。里面维护着项目文件目录结构，文件指针引用。文件指针包括准确添加进来的有修改的最新文件指针，以及未修改的文件指针。 \u0026#x21a9;\u0026#xfe0e;\n shell所使用的，简化来的正则表达式。星号*匹配零个或多个任意字符。问号?匹配一个任意字符。[abc]匹配任意一个方括号中的字符。[0-9]匹配0到9的任意一个数字。**匹配任意位于中间的目录。 \u0026#x21a9;\u0026#xfe0e;\n 又叫做上游分支。 \u0026#x21a9;\u0026#xfe0e;\n   ","id":2,"section":"posts","summary":"Git基础手册 作者：eclipsa 摘要：较为完整的介绍git的结构和理念。提供基本的指令使用教程。文中使用的系统为ubuntu。 [toc] Git是什","tags":["计算机","git"],"title":"Git基础手册","uri":"https://eclipsatool.github.io/2020/08/15/git%E5%9F%BA%E7%A1%80%E6%89%8B%E5%86%8C/","year":"2020"},{"content":"Git基础命令速查手册 作者：eclipsa\n摘要：git常用指令分类汇总。文中使用的系统为ubuntu。\n[toc]\n常用命令与文件位置 安装Git ubuntu：sudo apt-get install git\n获取帮助 git help git help \u0026lt;指令\u0026gt;  分类 基本配置 邮箱信息 配置全局邮箱信息，针对每个仓库。\ngit config --global user.name \u0026quot;John Doe\u0026quot; git config --global user.email johndoe@example.com  配置本地邮箱信息，针对个别仓库。\ngit config --local user.name \u0026quot;John Doe\u0026quot; git config --local user.email johndoe@example.com  检查配置\ngit config --list  .gitignore 以#开头的git会认为是注释。\n默认匹配模式会自动递归整个工作目录。使用标准glob模式1。\n匹配模式以/开头可以忽略指定目录。\n匹配模式以/结尾可以忽略指定的文件夹名。(会递归，所有同名文件夹都忽略)\n以!开头可以指定跟踪某些匹配模式匹配的内容。(相当于补丁)\n# 忽略所有的 .a 文件 *.a # 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件 !lib.a # 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO /TODO # 忽略任何目录下名为 build 的文件夹 build/ # 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt doc/*.txt # 忽略 doc/ 目录及其所有子目录下的 .pdf 文件 doc/**/*.pdf  获取内置帮助。\nman gitignore  工具配置 git config --global core.editor可以指定git默认用的文本编辑器。\n本地仓库 建立仓库 建立本地空白仓库\ncd /home/eclipsa/example_git_workspace git init  文件操作 查看文件状态\ngit status git stauts -s  准确添加文件\ngit add \u0026lt;文件名\u0026gt;  撤销添加文件\ngit reset HEAD \u0026lt;文件名\u0026gt;  查看文件异同\ngit diff git diff --cached  提交文件\ngit commit git commit -m \u0026quot;修改注释” git commit \u0026lt;文件名\u0026gt; git commit -a \u0026lt;文件名\u0026gt;  重新提交\ngit commit --amend  查看缓存区文件列表\ngit ls-files  移除文件\ngit rm \u0026lt;文件名\u0026gt; git rm --cached \u0026lt;文件名\u0026gt;  移动/重命名文件\ngit mv \u0026lt;文件名\u0026gt; \u0026lt;新文件名\u0026gt;  工作区单个文件还原上次提交状态\ngit checkout -- \u0026lt;文件名\u0026gt;  清理文件\n用于清理git中未跟踪的软件(.gitignore也算跟踪)。\ngit clean git clean -x  日志操作 查看日志\ngit log git log -p -2 git log -patch -2 git log --stat  git log有用的参数\n   参数 作用     \u0026ndash;graph 在日志旁以 ASCII 图形显示分支与合并历史。   -p 按文件补丁形式显示。   \u0026ndash;name-only 仅在提交信息后显示已修改的文件清单。   \u0026ndash;name-status 显示新增、修改、删除的文件清单。   \u0026ndash;oneline --pretty=oneline --abbrev-commit 合用的简写。一行显示。   \u0026ndash;author=\u0026rdquo;\u0026rdquo; 限制作者。   \u0026ndash;since, \u0026ndash;after 指定时间。   \u0026ndash;grep 仅显示提交说明中包含指定字符串的提交。    远程仓库 建立仓库 克隆远程仓库\n(git clone支持多种通讯协议。)\ngit clone \u0026lt;url\u0026gt; git clone ssh://[user@]host.xz[:port]/path/to/repo.git/ git clone git://host.xz[:port]/path/to/repo.git/ git clone http[s]://host.xz[:port]/path/to/repo.git/ git clone ftp[s]://host.xz[:port]/path/to/repo.git/  为本地仓库添加远程仓库\ngit remote add \u0026lt;仓库服务器别名\u0026gt; \u0026lt;url\u0026gt;  仓库状态 git remote git remote -v git remote show \u0026lt;远程仓库服务器名\u0026gt;  仓库操作 获取远程仓库\ngit fetch \u0026lt;远程仓库服务器名\u0026gt;  推送本地仓库\ngit push \u0026lt;远程仓库服务器名\u0026gt; \u0026lt;推送本地版本库分支名\u0026gt; git push \u0026lt;远程仓库服务器名\u0026gt; \u0026lt;推送本地版本库分支名\u0026gt;:\u0026lt;远程仓库分支名\u0026gt;  同步远程仓库\ngit pull  重命名远程仓库\ngit remote rename \u0026lt;远程仓库服务器名\u0026gt; \u0026lt;远程仓库服务器新名\u0026gt;  删除远程仓库\ngit remote remove \u0026lt;远程仓库服务器名\u0026gt; git remote rm \u0026lt;远程仓库服务器名\u0026gt;  分支 分支状态 查看分支\ngit branch git branch -v git branch --no--merged git branch --merged git branch --merged \u0026lt;分支名\u0026gt; git branch -vv  分支操作 创建分支\ngit branch \u0026lt;分支名\u0026gt;  创建并切换分支\ngit checkout -b \u0026lt;分支名\u0026gt;  切换分支\ngit checkout \u0026lt;分支名\u0026gt;  合并分支\ngit merge \u0026lt;分支名\u0026gt;  删除分支\ngit branch -d \u0026lt;分支名\u0026gt;  创建跟踪分支\ngit checkout -b \u0026lt;本地分支名\u0026gt; \u0026lt;远程服务器名\u0026gt;/\u0026lt;远程分支名\u0026gt; git checkout --track \u0026lt;远程服务器名\u0026gt;/\u0026lt;远程分支名\u0026gt;  设置/修改上游分支\ngit branch -u \u0026lt;远程服务器名\u0026gt;/\u0026lt;远程分支名\u0026gt;  下载分支版本库\ngit fetch --all  删除远程分支\ngit pull \u0026lt;远程服务器名\u0026gt; --delete \u0026lt;分支名\u0026gt;  贮藏 贮藏状态 列出贮藏\ngit stash list  贮藏操作 创建贮藏\ngit stash git stash push  应用贮藏\n--index可以让git在应用贮藏时，同时应用到工作目录和缓存区，而非只是工作目录。\ngit stash apply git stash apply stash@{贮藏号} git stash apply --index  移除贮藏\ngit stash drop git stash drop stash@{贮藏号}  应用贮藏同时移除贮藏\ngit stash pop  从贮藏创建分支\ngit stash branch \u0026lt;分支名\u0026gt; git stash branch \u0026lt;分支名\u0026gt; stash@{贮藏号}  版本库标签 标签状态 列出全部标签\ngit tag  显示标签信息\ngit tag show  查看标签快照\ngit checkout \u0026lt;标签名\u0026gt;  标签操作 给当前版本打标签\ngit tag -a \u0026lt;标签名\u0026gt;  补打标签\ngit tag -a \u0026lt;标签名\u0026gt; \u0026lt;部分校验和/完整校验和\u0026gt;  推送标签\ngit pull \u0026lt;分支名\u0026gt; \u0026lt;标签名\u0026gt; git pull \u0026lt;分支名\u0026gt; --tags  删除标签\ngit tag -d \u0026lt;标签名\u0026gt;  删除服务器标签\ngit pull \u0026lt;远程仓库服务器名\u0026gt; :refs/tags/\u0026lt;标签名\u0026gt; git pull \u0026lt;远程仓库服务器名\u0026gt; --delete \u0026lt;标签名\u0026gt;    shell所使用的，简化来的正则表达式。星号*匹配零个或多个任意字符。问号?匹配一个任意字符。[abc]匹配任意一个方括号中的字符。[0-9]匹配0到9的任意一个数字。**匹配任意位于中间的目录 \u0026#x21a9;\u0026#xfe0e;\n   ","id":3,"section":"posts","summary":"Git基础命令速查手册 作者：eclipsa 摘要：git常用指令分类汇总。文中使用的系统为ubuntu。 [toc] 常用命令与文件位置 安装Git ubun","tags":["计算机","git"],"title":"Git基础命令速查手册","uri":"https://eclipsatool.github.io/2020/08/15/git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/","year":"2020"},{"content":"Markdown基本语法 作者：eclipsa\n摘要：本文旨在提供较为标准部分的Markdown语法指南，并不记录全部Markdown语法。\n[toc]\n什么是Markdown Markdown是一种具有纯文本格式语法的轻量级标记语言。\n目的：提供一种易于阅读和易于编写的纯文本格式书写，可选将其转换为的XHTML/HTML。\n标准化：尚未完全标准化，故软件对其支持和扩展有所异同。\n基础语法 标题 设置标题    Markdown HTML     # 一级标题 一级标题   ## 二级标题 一级标题   ### 三级标题 一级标题   #### 四级标题 一级标题   ##### 五级标题 一级标题   ###### 六级标题 六级标题    语法详解：用#开头，然后输入一个空格，然后输入标题内容。\n语法意义：#的数量代表标题的级别。\n设置标题IDs 注意：此语法支持并没有广泛支持。\n   Markdown HTML     # 一级标题{#标题id} 一级标题    语法详解：在标题之后输入一个{}，然后在其中输入#，然后输入自定义标题id。\n语法意义：标题id可用来作为锚点，使超链接可以跳转到相应的地方。\n段落    Markdown HTML     内容 空白行 内容 内容\n空白行 内容\n    语法详解：用空白行分割的内容就会称为两个段落。\n语法注意事项1：段落开头不应该有空格或tab。\n断行    Markdown HTML     内容 空格 空格 回车 内容 内容内容\n    语法详解：在句子尾部输入两个以上的空格，然后换行就可以断行。\n语法意义：这适用于同一个段落内需要断行的地方。断行前后的内容同属于一个段落\n转义字符    Markdown     \\|    语法详解：输入一个反斜杠后输入需要转义的字符即可将Markdown语法中用的一些字符转义为字符，从而可以显示。\n强调 斜体    Markdown HTML 渲染效果     这是*斜体*内容 这是\u0026lt;em\u0026gt;斜体\u0026lt;/em\u0026gt;内容 这是重点内容    语法详解：在内容前后输入1个*号即可以使内容加斜。\n加粗    Markdown HTML 渲染效果     这是**粗体**内容 这是\u0026lt;strong\u0026gt;粗体\u0026lt;/strong\u0026gt;内容 这是粗体内容    语法详解：在内容前后输入两个*号即可以使内容加粗。\n粗斜体    Markdown HTML 渲染效果     这是***粗斜体***内容 这是\u0026lt;strong\u0026gt;\u0026lt;em\u0026gt;粗斜体\u0026lt;/em\u0026gt;\u0026lt;/strong\u0026gt;内容 这是粗斜体内容    语法详解：在内容前后输入3个*号即可以使内容加粗斜。\n删除线    Markdown HTML 渲染效果     这是~~删除线~~内容 这是\u0026lt;del\u0026gt;删除线\u0026lt;/del\u0026gt;内容 这是删除线内容    语法详解：在内容前后输入两个~号即可以使内容有删除线。\n区块引用    Markdown     \u0026gt;这是区块引用的内容    语法详解：在每行前输入一个或多个\u0026gt;号，然后输入一个空格，即可以定义一个区块。每个\u0026gt;号增加块引用的层级一次。块引用支持连续多行合并，如同一个块一样。\n语法意义：区块引用用于定义一个长引用文段。\n语法注意事项1：区块引用支持多行合并，如果想在同一个区块内放两段引用文段，两段引用文段中间补上一个同等级的空区块引用即可。效果如下\n\u0026gt;引用文1 \u0026gt; \u0026gt;引用文2  语法注意事项2：区块引用的多层嵌套，效果如下\n 引用文1\n 引用文2\n  语法注意事项3：区块引用可以支持其他元素，如粗体，标题等，具体情况需要测试。\n列表 有序列表    Markdown HTML     1. 内容 \u0026lt;ol\u0026gt;\u0026lt;li\u0026gt;内容\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;    语法详解：以阿拉伯数字开头，然后输入一个.号，然后输入一个空格，即定义了一个有序列表的一项。\n语法注意事项1：有序列表支持多层嵌套。前面打n组四个空格，然后输入有序列表可以实现n级有序列表。\n语法注意事项2：有序列表对数字的值没有要求，顺序数值大小随意。\n语法注意事项3：有序列表可以支持其他元素，如粗体，标题等，具体情况需要测试。\n无序列表    Markdown HTML     - 内容 \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;内容\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;    语法详解：以-号开头，然后输入一个空格，即定义了一个无序列表的一项。\n语法注意事项1：无序列表支持多层嵌套。前面打n组四个空格，然后输入有序列表可以实现n级无序列表。\n语法注意事项2：无序列表可以支持其他元素，如粗体，标题等，具体情况需要测试。\n任务列表    功能 Markdown     未完成任务 - [ ] 任务描述   已完成任务 - [x] 任务描述    语法详解：以-号开头，然后输入一个空格，然后一个[]，[]中空格代表未完成，x代表已完成，随后输入任务描述。\n自定义列表 注意：此语法支持并没有广泛支持。\n语法如下\n类别 : 种名  HTML如下\n\u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;类别\u0026lt;dt\u0026gt; \u0026lt;dd\u0026gt;种名d\u0026lt;dd\u0026gt; \u0026lt;/dl\u0026gt;  语法详解：第一行定义类别名，第二行以:号开头，然后输入一个空格，接下来输入种名即可。\n图片    Markdown HTML     ![失败描述](/assets/images/tux.png) \u0026lt;img src=\u0026quot;/assets/images/tux.png\u0026quot; alt=\u0026quot;失败描述\u0026quot;\u0026gt;   ![失败描述](/assets/images/tux.png \u0026quot;图片标题\u0026quot;) \u0026lt;img src=\u0026quot;/assets/images/tux.png\u0026quot; alt=\u0026quot;失败描述\u0026quot; title=\u0026quot;图片标题\u0026quot;    语法详解：以!号开头，随后是[]，最后是()。[]中填写图片描述，(填写文件路径或者url)\n语法注意事项1：失败描述在图片加载失败时可能会以文字形式出现(视渲染支持)。图片标题在图片加载后鼠标悬浮于图片之上一会会显示。\n代码 单行代码    Markdown HTML     `代码行` \u0026lt;code\u0026gt;代码行\u0026lt;/code\u0026gt;    语法详解：前后输入`号包裹代码即表示为代码，不尝试渲染其他元素。仅限一行以内的内容。\n代码区块 语法如下\n{ \u0026quot;firstName\u0026quot;: \u0026quot;John\u0026quot;, \u0026quot;lastName\u0026quot;: \u0026quot;Smith\u0026quot;, \u0026quot;age\u0026quot;: 25 }  效果\n{ \u0026quot;firstName\u0026quot;: \u0026quot;John\u0026quot;, \u0026quot;lastName\u0026quot;: \u0026quot;Smith\u0026quot;, \u0026quot;age\u0026quot;: 25 }  语法详解：代码内容前后输入三个`号开头的空行，第一组后面可以跟代码的语言名称。渲染器可以用于成立代码高亮。\n水平线    Markdown HTML     \u0026mdash;     语法详解：以三个-号开头的空行将变成水平线。\n语法注意事项1：三个-号前后不要有内容。\n超链接 直接超链接    Markdown HTML     \u0026lt;test@example.com\u0026gt; \u0026lt;a href=\u0026quot;test@example.com\u0026quot;\u0026gt;test@example.com\u0026lt;/a\u0026gt;   \u0026lt;http://test.com\u0026gt; \u0026lt;a href=\u0026quot;http://test.com\u0026quot;\u0026gt;http://test.com\u0026lt;/a\u0026gt;    语法详解：将URLs或邮箱地址放在\u0026lt;\u0026gt;之中可以生成超链接。\n语法注意事项1：简易超链接支持字体强调语法。\n格式化超链接    Markdown HTML     [显示文本](http://test@example.com) \u0026lt;a href=\u0026quot;http://test@example.com\u0026quot;\u0026gt;显示文本\u0026lt;/a\u0026gt;   [显示文本](#锚点名) \u0026lt;a href=\u0026quot;#锚点名\u0026quot;\u0026gt;显示文本\u0026lt;/a\u0026gt;    语法详解：输入一个[]，然后输入一个()。在[]中输入要显示的文字，在()中输入超链接的指向。\n语法注意事项1：格式化超链接支持字体强调语法。\n引用式超链接    功能 Markdown HTML     引用超链接 [显示文本][超链接别名]    超链接源 [超链接别名]: http://test@example.com \u0026lt;a href=\u0026quot;http://test@example.com\u0026quot;\u0026gt;显示文本\u0026lt;/a\u0026gt;   超链接源 [超链接别名]: http://test@example.com 链接标题 \u0026lt;a href=\u0026quot;http://test@example.com\u0026quot; title=\u0026quot;链接标题\u0026quot;\u0026gt;显示文本\u0026lt;/a\u0026gt;    语法详解：引用超链接语法是先输入两个[]，第一个放显示文本，第二个放超链接别名，链接别名用于绑定超链接源。设置链接源语法为先输入一个[]，在[]中输入超链接别名，然后输入:号，一个空格，随后是超链接。\n语法目的：方便重复引用同一个超链接。\n语法注意事项1：超链接别名不区分大小。\n语法注意事项2：引用式超链接中超链接源可以随意放置在文章中任意行。一行一条。建议统一写在文末。\nHTML Markdown支持使用HTML的语法，但有部分元素不支持。在块级HTML中不能再使用Markdown语法。\n扩展语法 表格 表格语法如下\n|标题1|标题2| |---|---:| |内容|内容| |内容|内容|  渲染效果\n   标题1 标题2     内容 内容   内容 内容    语法详解：用|号将内容包裹。第二行内容全部用-号定义表格标题栏，每个内容至少3个-号，在-号最左或者最右输入:号将使该栏支持左或右对齐，如果左右都有:号则为中间对齐。\n语法注意事项1：表格内支持一些内嵌元素。包括链接、单行代码、强调等。不包括标题、多行元素、水平线、HTML标签等。\n脚注    功能 Markdown     引用脚注 [^脚注别名]   设置脚注源 [脚注别名]: 注释内容    语法详解：引用脚注语法是先输入一个[]，在里面输入一个^号，然后是脚注别名，可以是数字。设置脚注源语法为先输入一个[]，在[]中输入一个^号和脚注别名，然后输入:号，一个空格，后面跟脚注内容。\n语法目的：为文段添加注释或词汇添加注释。\n语法注意事项1：超链接别名不区分大小。\n表情    Markdown 渲染效果     😂 😂    语法详解：前后用:号包裹，中间输入表情英文简码即可。\n表情简码网址1：https://www.webfx.com/tools/emoji-cheat-sheet/\n表情简码网址2：https://gist.github.com/rxaviers/7360908\n在线信息 Markdown转义字符列表 Markdown转义字符列表: https://www.markdownguide.org/basic-syntax/#characters-you-can-escape\n英文手册 基础语法：https://www.markdownguide.org/basic-syntax/\n扩展语法：https://www.markdownguide.org/extended-syntax/\n中文菜鸟教程手册 Markdown教程：https://www.runoob.com/markdown/md-tutorial.html\nGFM1手册 GFM1速查手册: https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown\nGFM1细则: https://github.github.com/gfm/#disallowed-raw-html-extension-\n表情简码 表情简码网址1：https://www.webfx.com/tools/emoji-cheat-sheet/\n表情简码网址2：https://gist.github.com/rxaviers/7360908\n  GitHub Flavored Markdown，GitHub基于Markdown的扩展版本Markdown。 \u0026#x21a9;\u0026#xfe0e;\n   ","id":4,"section":"posts","summary":"Markdown基本语法 作者：eclipsa 摘要：本文旨在提供较为标准部分的Markdown语法指南，并不记录全部Markdown语法。 [toc] 什","tags":["Markdown","计算机"],"title":"Markdown基本语法","uri":"https://eclipsatool.github.io/2020/08/15/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","year":"2020"}],"tags":[{"title":"git","uri":"https://eclipsatool.github.io/tags/git/"},{"title":"Markdown","uri":"https://eclipsatool.github.io/tags/markdown/"},{"title":"source insight","uri":"https://eclipsatool.github.io/tags/source-insight/"},{"title":"vim","uri":"https://eclipsatool.github.io/tags/vim/"},{"title":"应用软件","uri":"https://eclipsatool.github.io/tags/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"},{"title":"计算机","uri":"https://eclipsatool.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}]}